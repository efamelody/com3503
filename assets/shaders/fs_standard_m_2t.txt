#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float intensity;

    float constant;
    float linear;
    float quadratic;

    vec3 direction;
    float cutOff;
    float outerCutOff;
    int type;
};

#define MAX_POINT_LIGHTS 10
uniform Light lights[MAX_POINT_LIGHTS];
uniform int numLights;

struct Material {
    sampler2D diffuse;   // Add texture for diffuse
    sampler2D specular;  // Add texture for specular
    float shininess;
};

uniform Material material;

vec3 CalcSpotLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
    vec3 lightDir = normalize(light.position - aPos);
    vec3 reflectDir = reflect(-lightDir, norm);

    // Diffuse component
    float diff = max(dot(norm, lightDir), 0.0);

    // Specular component
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    // Attenuation
    float distance = length(light.position - aPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    // Spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction));
    float intensity = clamp((theta - light.outerCutOff) / (light.cutOff - light.outerCutOff), 0.0, 1.0);

    // Apply textures
    vec3 diffuseTex = texture(material.diffuse, aTexCoord).rgb;
    vec3 specularTex = texture(material.specular, aTexCoord).rgb;

    // Final components
    vec3 ambient = light.ambient * diffuseTex;
    vec3 diffuse = light.diffuse * diff * diffuseTex;
    vec3 specular = light.specular * spec * specularTex;

    // Combine results with attenuation and spotlight intensity
    vec3 result = (ambient + diffuse * intensity + specular * intensity) * attenuation * light.intensity;

    return result;
}

vec3 CalcPointLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
  // Direction and attenuation
  vec3 lightDir = normalize(light.position - aPos);
  float distance = length(light.position - aPos);
  float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

  // Diffuse component
  float diff = max(dot(norm, lightDir), 0.0);

  // Specular component
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

  // Apply textures
  vec3 diffuseTex = texture(material.diffuse, aTexCoord).rgb;
  vec3 specularTex = texture(material.specular, aTexCoord).rgb;

  // Final components
  vec3 ambient = light.ambient * diffuseTex;
  vec3 diffuse = light.diffuse * diff * diffuseTex;
  vec3 specular = light.specular * spec * specularTex;

  // Combine results with attenuation
  vec3 result = (ambient + diffuse + specular) * attenuation * light.intensity;

  return result;
}

void main() {
    vec3 norm = normalize(aNormal);
    vec3 viewDir = normalize(viewPos - aPos);

    vec3 result = vec3(0.0);
    for (int i = 0; i < numLights; i++) {
        if (lights[i].type == 0) {
            // General light
            result += CalcPointLight(lights[i], norm, aPos, viewDir);
        } else if (lights[i].type == 1) {
            // Spotlight
            result += CalcSpotLight(lights[i], norm, aPos, viewDir);
        }
    }

    fragColor = vec4(result, 1.0);
}
