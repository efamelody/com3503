#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform vec3 viewPos;

struct Light {
    vec3 position;
    vec3 direction; // Spotlight direction
    float cutOff; // Inner cutoff (cosine of angle)
    float outerCutOff; // Outer cutoff (cosine of angle)

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

uniform Light light;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

uniform Material material;

void main() {
    // Ambient lighting
    vec3 ambient = light.ambient * texture(first_texture, aTexCoord).rgb;

    // Distance-based attenuation
    float distance = max(length(light.position - aPos), 0.01); // Prevent zero distance
    float attenuation = clamp(1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance)), 0.1, 1.0);

    // Diffuse lighting
    vec3 norm = normalize(aNormal);
    vec3 lightDir = normalize(light.position - aPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * texture(first_texture, aTexCoord).rgb;

    // Specular lighting
    vec3 viewDir = normalize(viewPos - aPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * material.specular;

    // Spotlight cutoff
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

    // Combine components
    vec3 result = ambient + (diffuse + specular) * intensity * attenuation;
    fragColor = vec4(result, 1.0);
    // fragColor = vec4(vec3(attenuation), 1.0);


}
