#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;  // The window texture (with transparency)
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light;  

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;
uniform vec3 objectColor; // Example color uniform
uniform float alpha;      // Add an alpha uniform for transparency control

void main() {
  // Sample the texture, including the alpha channel
  vec4 texColor = texture(first_texture, aTexCoord);
  
  // If the alpha value is less than a threshold, discard the fragment
  if (texColor.a < 0.1) {
    discard;
  }

  // Calculate the lighting
  // ambient
  vec3 ambient = light.ambient * texColor.rgb;
  ragColor = vec4(objectColor, alpha); // Alpha < 1.0 for transparency
  
  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff * texColor.rgb;
  
  // specular
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * material.specular;

  // Combine all lighting components
  vec3 result = ambient + diffuse + specular;
  
  // Set the fragment color, using the alpha value from the texture
  fragColor = vec4(result, texColor.a); // Use the alpha channel of the texture for transparency
}
