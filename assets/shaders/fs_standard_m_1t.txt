#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float intensity;

    float constant;
    float linear;
    float quadratic;

    vec3 direction;
    float cutOff;
    float outerCutOff;
    int type; // 0 = Point light, 1 = Spotlight
};

#define MAX_POINT_LIGHTS 10
uniform Light lights[MAX_POINT_LIGHTS];
uniform int numLights;

struct Material {
    sampler2D texture; // Single texture for both diffuse and specular
    float shininess;
};

uniform Material material;

// Function to calculate point light effect
vec3 CalcPointLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
    vec3 lightDir = normalize(light.position - aPos);
    vec3 reflectDir = reflect(-lightDir, norm);

    // Diffuse component
    float diff = max(dot(norm, lightDir), 0.0);

    // Specular component
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    // Attenuation
    float distance = length(light.position - aPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    // Apply texture
    vec3 textureColor = texture(material.texture, aTexCoord).rgb;

    // Final components
    vec3 ambient = light.ambient * textureColor;
    vec3 diffuse = light.diffuse * diff * textureColor;
    vec3 specular =
