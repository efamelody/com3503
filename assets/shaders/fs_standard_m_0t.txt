#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float intensity;

  float constant;
  float linear;
  float quadratic;

  vec3 direction;
  float cutOff;
  float outerCutOff;
  // float isSpotlight;

};

#define MAX_POINT_LIGHTS 10  
uniform Light lights[MAX_POINT_LIGHTS];
uniform int numLights;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

vec3 CalcPointLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
  vec3 lightDir = normalize(light.position - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);

  float diff = max(dot(norm, lightDir),0.0);
  

  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

  float distance = length(light.direction);
  float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

  float theta = dot(lightDir, normalize(-light.direction));
  float epsilon   = light.cutOff - light.outerCutOff;
  float intensity =  smoothstep(0.0, 1.0, (theta - light.outerCutOff) / epsilon);

  vec3 diffuse = light.diffuse * (diff * material.diffuse);
  vec3 specular = light.specular * (spec * material.specular);
  vec3 ambient = light.ambient * material.ambient;

  vec3 result = ambient * attenuation;
  if (theta < light.cutOff) {
    diffuse *= intensity * attenuation;
    specular *= intensity * attenuation;
    result += diffuse + specular;
    result *= light.intensity;
    return result;
  }
  return result;

}

void main() {
  vec3 norm = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);

  vec3 result = vec3(0.0);
  for(int i = 0; i < numLights; i++)
    result += CalcPointLight(lights[i], norm, aPos, viewDir); 

  fragColor = vec4(result, 1.0);
}